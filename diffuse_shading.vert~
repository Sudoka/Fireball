// Vertex shader for per-pixel diffuse shading.The
// teapot is a good object to test this shader, since
// the .obj file includes surface normals.

// The shader computes the unit light direction and unit
// surface normal, which are passed to the fragment
// shader as varying variables.

varying vec3 normal;
varying vec4  ambientGlobal,ecPos;

varying vec3 lightDir0, halfVector0;
varying vec4 diffuse0, ambient0;
varying float dist0,NdotL0;

varying vec3 lightDir1,halfVector1;
varying vec4 diffuse1, ambient1;
varying float dist1,NdotL1;

void main()
{	
	vec4 new_Vert = gl_Vertex;

	// Note that gl_LightSource, gl_NormalMatrix, and gl_Normal
	// are pre-defined variables that access the current OpenGL
	// state.
	   
	ecPos = gl_ModelViewMatrix*gl_Vertex;
	normal = normalize(gl_NormalMatrix * gl_Normal);
	ambientGlobal = gl_LightModel.ambient * gl_FrontMaterial.ambient;	

/***** Point light *****/	
	vec3 aux0;
	aux0 = vec3(gl_LightSource[0].position-ecPos);
	dist0 =length(aux0);
	lightDir0 = normalize(aux0);

	NdotL0=max(dot(normal,lightDir0),0.0);
	vec4 repulse = vec4(lightDir0*NdotL0,0.0);
	dist0 = max(0.0,dist0/3.0);
	repulse=repulse/(1.0 + dist0 + dist0*dist0);
	repulse=normalize(repulse);
	new_Vert = new_Vert-repulse;

	halfVector0 = normalize(gl_LightSource[0].halfVector.xyz);
	diffuse0 = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;
	ambient0 = gl_FrontMaterial.ambient * gl_LightSource[0].ambient;


/****** Spot Light ********/
	vec3 aux1;
	aux1 = vec3(gl_LightSource[1].position-ecPos);
	dist1 = length(aux1);
	lightDir1 = normalize(aux1);	

	halfVector1 = normalize(gl_LightSource[1].halfVector.xyz);
	diffuse1 = gl_FrontMaterial.diffuse * gl_LightSource[1].diffuse;
	ambient1 = gl_FrontMaterial.ambient * gl_LightSource[1].ambient;
	   	

	gl_Position=gl_ProjectionMatrix*gl_ModelViewMatrix*new_Vert;
	//gl_Position = ftransform();
}
